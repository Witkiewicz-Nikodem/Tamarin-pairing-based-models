theory IDE_Boneh_Franklin_2001_not_Naive
begin
builtins: diffie-hellman, bilinear-pairing, xor

functions: h1/1
functions: h2/1



/*Set Up */

rule Set_up:
let 
    pk_PKG = pmult(~Ltk_PKG, 'P')
in
    [ Fr(~Ltk_PKG) ]
  --[Register_PKG($PKG)]->
    [!PKG_Ltk($PKG, ~Ltk_PKG), !Pk_PKG($PKG, pk_PKG), Out(pk_PKG)]

/* Extract */
rule Extract:
let
    Ltk = pmult(Ltk_PKG,h1(~ID))
in
    [ Fr(~ID), !PKG_Ltk($PKG, Ltk_PKG)]
  --[Init_party($B, ~ID)]->
    [!Id($B, ~ID), !Ltk($B, Ltk), Out(<$B,~ID>)]

/* Ecnrypt */
rule Enc:
let
    PK = h1(ID)
    g_id = em(PK, pk_PKG)
    U = pmult(~r,'P')
    V = ~m XOR h2(g_id^(~r))
in
    [Fr(~r), Fr(~m), !Id(B, ID), !Pk_PKG(PKG, pk_PKG)]
  --[Enc_message(B, ~m), Enc_Random(~r), Enc_cyphertext(<U,V>)]->
    [Out(<U,V>)]

/* Decrypt */
rule Dec:
let
    m = V XOR h2(em(Ltk,U))
in
    [In(<U,V>), !Ltk(B, Ltk)]
  --[Dec_message(B, m)]->
    []

/* reveal keys rules */
rule Reveal_receiver:
    [!Ltk(B, Ltk)]
  --[Receiver_revealed(B, Ltk)]->
    [Out(<B, Ltk>)]

rule Reveal_master:
    [!PKG_Ltk(PKG, Ltk_PKG)]
  --[Master_revealed(PKG, Ltk_PKG)]->
    [Out(<PKG, Ltk_PKG>)]

lemma protocol_executable:
/* If a trace ends with the Dec fact and the sent message equals the received message, the protocol is modeled correctly. */
    exists-trace
    "Ex B m_sent m_received#i #j.
     Enc_message(B, m_sent)@i & 
     Dec_message(B, m_received)@j & 
     m_sent = m_received"

lemma message_secrecy:
/*If B received and correctly Dec_message message then adversary didn't obrain the message */
    "All B m #i #j. Dec_message(B,m)@i 
     & Enc_message(B,m)@j
     & not (Ex B_ltk #k. Receiver_revealed(B, B_ltk)@k) 
     & not (Ex PKG Ltk_PKG #k. Master_revealed(PKG, Ltk_PKG)@k)
     ==> 
     not (Ex #m. K(m)@m)"

lemma receiver_ltk_revealed:
    exists-trace
    "Ex B m #i #j. Dec_message(B,m)@i 
     & Enc_message(B,m)@j
     & not ( Ex PKG Ltk_PKG #l. Master_revealed(PKG, Ltk_PKG)@l)
     & (Ex #m. K(m)@m)"

lemma master_ltk_revealed:
    exists-trace
    "Ex B m #i #j. Dec_message(B,m)@i 
     & Enc_message(B,m)@j
     & not ( Ex B_ltk #l. Receiver_revealed(B, B_ltk)@l)
     & (Ex #n. K(m)@n)"
end
